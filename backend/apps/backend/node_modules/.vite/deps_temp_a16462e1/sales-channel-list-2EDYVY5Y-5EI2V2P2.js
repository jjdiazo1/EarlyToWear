import {
  SingleColumnPage
} from "./chunk-AEMIRFYX.js";
import {
  useSalesChannelTableColumns,
  useSalesChannelTableEmptyState,
  useSalesChannelTableFilters,
  useSalesChannelTableQuery
} from "./chunk-MYKUQIWD.js";
import "./chunk-PYIIZYAY.js";
import {
  DataTable
} from "./chunk-GHKTBX2J.js";
import "./chunk-DMSO7TLP.js";
import "./chunk-D3Q6I47Q.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import "./chunk-IRP64SGR.js";
import "./chunk-HDKB57EC.js";
import "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import {
  useStore
} from "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import {
  useDeleteSalesChannelLazy,
  useSalesChannels
} from "./chunk-GZ7A7UHH.js";
import "./chunk-ECEQ7FRD.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useNavigate
} from "./chunk-I262FXMQ.js";
import {
  Container,
  PencilSquare,
  Trash,
  createDataTableColumnHelper,
  toast,
  usePrompt
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/sales-channel-list-2EDYVY5Y.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
var SalesChannelListTable = () => {
  const { t } = useTranslation();
  const { store } = useStore();
  const searchParams = useSalesChannelTableQuery({
    pageSize: PAGE_SIZE
  });
  const { sales_channels, count, isPending, isError, error } = useSalesChannels(
    searchParams,
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useSalesChannelTableFilters();
  const emptyState = useSalesChannelTableEmptyState();
  const sales_channels_data = (sales_channels == null ? void 0 : sales_channels.map((sales_channel) => {
    return {
      ...sales_channel,
      is_default: (store == null ? void 0 : store.default_sales_channel_id) === sales_channel.id
    };
  })) ?? [];
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(Container, { className: "p-0", children: (0, import_jsx_runtime.jsx)(
    DataTable,
    {
      data: sales_channels_data,
      columns,
      rowCount: count,
      getRowId: (row) => row.id,
      pageSize: PAGE_SIZE,
      filters,
      isLoading: isPending,
      emptyState,
      heading: t("salesChannels.domain"),
      subHeading: t("salesChannels.subtitle"),
      action: {
        label: t("actions.create"),
        to: "/settings/sales-channels/create"
      },
      rowHref: (row) => `/settings/sales-channels/${row.id}`
    }
  ) });
};
var columnHelper = createDataTableColumnHelper();
var useColumns = () => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const base = useSalesChannelTableColumns();
  const { mutateAsync } = useDeleteSalesChannelLazy();
  const handleDelete = (0, import_react.useCallback)(
    async (salesChannel) => {
      const confirm = await prompt({
        title: t("general.areYouSure"),
        description: t("salesChannels.deleteSalesChannelWarning", {
          name: salesChannel.name
        }),
        verificationInstruction: t("general.typeToConfirm"),
        verificationText: salesChannel.name,
        confirmText: t("actions.delete"),
        cancelText: t("actions.cancel")
      });
      if (!confirm) {
        return;
      }
      await mutateAsync(salesChannel.id, {
        onSuccess: () => {
          toast.success(t("salesChannels.toast.delete"));
        },
        onError: (e) => {
          toast.error(e.message);
        }
      });
    },
    [t, prompt, mutateAsync]
  );
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper.action({
        actions: (ctx) => {
          const disabledTooltip = ctx.row.original.is_default ? t("salesChannels.tooltip.cannotDeleteDefault") : void 0;
          return [
            [
              {
                icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
                label: t("actions.edit"),
                onClick: () => navigate(
                  `/settings/sales-channels/${ctx.row.original.id}/edit`
                )
              }
            ],
            [
              {
                icon: (0, import_jsx_runtime.jsx)(Trash, {}),
                label: t("actions.delete"),
                onClick: () => handleDelete(ctx.row.original),
                disabled: ctx.row.original.is_default,
                disabledTooltip
              }
            ]
          ];
        }
      })
    ],
    [base, handleDelete, navigate, t]
  );
};
var SalesChannelList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      widgets: {
        before: getWidgets("sales_channel.list.before"),
        after: getWidgets("sales_channel.list.after")
      },
      hasOutlet: true,
      children: (0, import_jsx_runtime2.jsx)(SalesChannelListTable, {})
    }
  );
};
export {
  SalesChannelList as Component
};
//# sourceMappingURL=sales-channel-list-2EDYVY5Y-5EI2V2P2.js.map
