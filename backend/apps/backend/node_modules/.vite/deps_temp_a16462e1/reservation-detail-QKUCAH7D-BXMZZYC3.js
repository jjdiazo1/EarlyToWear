import {
  InventoryItemGeneralSection
} from "./chunk-AODLKYGK.js";
import "./chunk-EGRHWZRV.js";
import {
  SectionRow
} from "./chunk-CRVWX3MW.js";
import {
  TwoColumnPage
} from "./chunk-AEMIRFYX.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import {
  TwoColumnPageSkeleton
} from "./chunk-7EFSR7FF.js";
import {
  ActionMenu
} from "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import {
  useStockLocation
} from "./chunk-IRP64SGR.js";
import "./chunk-HDKB57EC.js";
import {
  reservationItemsQueryKeys,
  useReservationItem
} from "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import "./chunk-GZ7A7UHH.js";
import {
  useInventoryItem
} from "./chunk-ECEQ7FRD.js";
import {
  queryClient
} from "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import {
  sdk
} from "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useLoaderData,
  useParams
} from "./chunk-I262FXMQ.js";
import {
  Container,
  Heading,
  PencilSquare
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/reservation-detail-QKUCAH7D.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var ReservationDetailBreadcrumb = (props) => {
  var _a, _b;
  const { id } = props.params || {};
  const { reservation } = useReservationItem(id, void 0, {
    initialData: props.data,
    enabled: Boolean(id)
  });
  if (!reservation) {
    return null;
  }
  const display = ((_a = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _a.title) ?? ((_b = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _b.sku) ?? reservation.id;
  return (0, import_jsx_runtime.jsx)("span", { children: display });
};
var reservationDetailQuery = (id) => ({
  queryKey: reservationItemsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.reservation.retrieve(id)
});
var reservationItemLoader = async ({ params }) => {
  const id = params.id;
  const query = reservationDetailQuery(id);
  return queryClient.ensureQueryData(query);
};
var ReservationGeneralSection = ({
  reservation
}) => {
  const { t } = useTranslation();
  const { inventory_item: inventoryItem, isPending: isLoadingInventoryItem } = useInventoryItem(reservation.inventory_item_id);
  const { stock_location: location, isPending: isLoadingLocation } = useStockLocation(reservation.location_id);
  if (isLoadingInventoryItem || !inventoryItem || isLoadingLocation || !location) {
    return (0, import_jsx_runtime2.jsx)("div", { children: "Loading..." });
  }
  const locationLevel = inventoryItem.location_levels.find(
    (l) => l.location_id === reservation.location_id
  );
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { children: t("inventory.reservation.header", {
        itemName: inventoryItem.title ?? inventoryItem.sku
      }) }),
      (0, import_jsx_runtime2.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
                  label: t("actions.edit"),
                  to: `edit`
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.lineItemId"),
        value: reservation.line_item_id
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.description"),
        value: reservation.description
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.location"),
        value: location == null ? void 0 : location.name
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.inStockAtLocation"),
        value: locationLevel == null ? void 0 : locationLevel.stocked_quantity
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.availableAtLocation"),
        value: locationLevel == null ? void 0 : locationLevel.available_quantity
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      SectionRow,
      {
        title: t("inventory.reservation.reservedAtLocation"),
        value: locationLevel == null ? void 0 : locationLevel.reserved_quantity
      }
    )
  ] });
};
var ReservationDetail = () => {
  var _a, _b;
  const { id } = useParams();
  const initialData = useLoaderData();
  const { reservation, isLoading, isError, error } = useReservationItem(
    id,
    void 0,
    {
      initialData
    }
  );
  const { inventory_item } = useInventoryItem(
    (_a = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _a.id,
    void 0,
    { enabled: !!((_b = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _b.id) }
  );
  const { getWidgets } = useExtension();
  if (isLoading || !reservation) {
    return (0, import_jsx_runtime3.jsx)(
      TwoColumnPageSkeleton,
      {
        mainSections: 1,
        sidebarSections: 1,
        showJSON: true,
        showMetadata: true
      }
    );
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsxs)(
    TwoColumnPage,
    {
      widgets: {
        before: getWidgets("reservation.details.before"),
        after: getWidgets("reservation.details.after"),
        sideBefore: getWidgets("reservation.details.side.before"),
        sideAfter: getWidgets("reservation.details.side.after")
      },
      data: reservation,
      showJSON: true,
      showMetadata: true,
      children: [
        (0, import_jsx_runtime3.jsx)(TwoColumnPage.Main, { children: (0, import_jsx_runtime3.jsx)(ReservationGeneralSection, { reservation }) }),
        (0, import_jsx_runtime3.jsx)(TwoColumnPage.Sidebar, { children: inventory_item && (0, import_jsx_runtime3.jsx)(InventoryItemGeneralSection, { inventoryItem: inventory_item }) })
      ]
    }
  );
};
export {
  ReservationDetailBreadcrumb as Breadcrumb,
  ReservationDetail as Component,
  reservationItemLoader as loader
};
//# sourceMappingURL=reservation-detail-QKUCAH7D-BXMZZYC3.js.map
