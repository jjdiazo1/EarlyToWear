import {
  useCustomerTableColumns
} from "./chunk-WW427ECV.js";
import {
  useCustomerTableQuery
} from "./chunk-5A2M6EP6.js";
import "./chunk-MK3JMYNI.js";
import "./chunk-D4WLXLGW.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-YTZMYL6K.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-UJDBFPAZ.js";
import "./chunk-B6I4MZEO.js";
import "./chunk-KWMDZ6BC.js";
import "./chunk-UJR4JJZD.js";
import {
  SingleColumnPage
} from "./chunk-AEMIRFYX.js";
import "./chunk-DMSO7TLP.js";
import {
  useCustomerTableFilters
} from "./chunk-E7BUCTJZ.js";
import "./chunk-S4LFXI6N.js";
import "./chunk-LDXLHKW3.js";
import "./chunk-S4FM5UR5.js";
import "./chunk-D3Q6I47Q.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import "./chunk-7EFSR7FF.js";
import {
  ActionMenu
} from "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-BZVV3R6L.js";
import "./chunk-5VPBSHL5.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YL65RGIG.js";
import {
  useCustomers
} from "./chunk-GNKYMVVR.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  Link
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  createColumnHelper
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/customer-list-3LZRV3ZM.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
var CustomerListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useCustomerTableQuery({ pageSize: PAGE_SIZE });
  const { customers, count, isLoading, isError, error } = useCustomers(
    {
      ...searchParams
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = useCustomerTableFilters();
  const columns = useColumns();
  const { table } = useDataTable({
    data: customers ?? [],
    columns,
    count,
    enablePagination: true,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: t("customers.domain") }),
      (0, import_jsx_runtime.jsx)(Link, { to: "/customers/create", children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime.jsx)(
      _DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        count,
        filters,
        orderBy: [
          { key: "email", label: t("fields.email") },
          { key: "first_name", label: t("fields.firstName") },
          { key: "last_name", label: t("fields.lastName") },
          { key: "has_account", label: t("customers.hasAccount") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        isLoading,
        navigateTo: (row) => row.original.id,
        search: true,
        queryObject: raw,
        noRecords: {
          message: t("customers.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var CustomerActions = ({
  customer
}) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/customers/${customer.id}/edit`
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const columns = useCustomerTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...columns,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime.jsx)(CustomerActions, { customer: row.original })
      })
    ],
    [columns]
  );
};
var CustomersList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("customer.list.after"),
        before: getWidgets("customer.list.before")
      },
      children: (0, import_jsx_runtime2.jsx)(CustomerListTable, {})
    }
  );
};
export {
  CustomersList as Component
};
//# sourceMappingURL=customer-list-3LZRV3ZM-EKCBB3LI.js.map
