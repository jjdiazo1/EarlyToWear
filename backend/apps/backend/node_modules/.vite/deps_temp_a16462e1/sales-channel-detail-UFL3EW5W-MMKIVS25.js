import {
  useProductTableColumns
} from "./chunk-BIRKHRM5.js";
import {
  useProductTableQuery
} from "./chunk-SFICZRIG.js";
import "./chunk-6OPIMQB2.js";
import "./chunk-D4WLXLGW.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-YTZMYL6K.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-UJDBFPAZ.js";
import "./chunk-B6I4MZEO.js";
import "./chunk-KWMDZ6BC.js";
import "./chunk-UJR4JJZD.js";
import {
  SingleColumnPage
} from "./chunk-AEMIRFYX.js";
import "./chunk-DMSO7TLP.js";
import {
  useProductTableFilters
} from "./chunk-3MPNBNW6.js";
import "./chunk-S4LFXI6N.js";
import "./chunk-LDXLHKW3.js";
import "./chunk-S4FM5UR5.js";
import "./chunk-D3Q6I47Q.js";
import "./chunk-4JOZ6DYP.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import {
  SingleColumnPageSkeleton
} from "./chunk-7EFSR7FF.js";
import {
  ActionMenu
} from "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-BZVV3R6L.js";
import "./chunk-5VPBSHL5.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YL65RGIG.js";
import "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import "./chunk-IRP64SGR.js";
import "./chunk-HDKB57EC.js";
import "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import {
  useDeleteSalesChannel,
  useSalesChannel,
  useSalesChannelRemoveProducts
} from "./chunk-GZ7A7UHH.js";
import {
  productsQueryKeys,
  useProducts
} from "./chunk-ECEQ7FRD.js";
import {
  queryClient
} from "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import {
  sdk
} from "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  Link,
  useLoaderData,
  useNavigate,
  useParams
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Checkbox,
  Container,
  Heading,
  PencilSquare,
  StatusBadge,
  Text,
  Trash,
  createColumnHelper,
  toast,
  usePrompt
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/sales-channel-detail-UFL3EW5W.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var SalesChannelDetailBreadcrumb = (props) => {
  const { id } = props.params || {};
  const { sales_channel } = useSalesChannel(id, {
    initialData: props.data,
    enabled: Boolean(id)
  });
  if (!sales_channel) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)("span", { children: sales_channel.name });
};
var salesChannelDetailQuery = (id) => ({
  queryKey: productsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.salesChannel.retrieve(id)
});
var salesChannelLoader = async ({ params }) => {
  const id = params.id;
  const query = salesChannelDetailQuery(id);
  return queryClient.ensureQueryData(query);
};
var SalesChannelGeneralSection = ({
  salesChannel
}) => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const { mutateAsync } = useDeleteSalesChannel(salesChannel.id);
  const handleDelete = async () => {
    const confirm = await prompt({
      title: t("general.areYouSure"),
      description: t("salesChannels.deleteSalesChannelWarning", {
        name: salesChannel.name
      }),
      verificationInstruction: t("general.typeToConfirm"),
      verificationText: salesChannel.name,
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!confirm) {
      return;
    }
    await mutateAsync(void 0, {
      onSuccess: () => {
        toast.success(t("salesChannels.toast.delete"));
        navigate("/settings/sales-channels", { replace: true });
      },
      onError: (e) => {
        toast.error(e.message);
      }
    });
  };
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { children: salesChannel.name }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-2", children: [
        (0, import_jsx_runtime2.jsx)(StatusBadge, { color: salesChannel.is_disabled ? "red" : "green", children: t(`general.${salesChannel.is_disabled ? "disabled" : "enabled"}`) }),
        (0, import_jsx_runtime2.jsx)(
          ActionMenu,
          {
            groups: [
              {
                actions: [
                  {
                    icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
                    label: t("actions.edit"),
                    to: `/settings/sales-channels/${salesChannel.id}/edit`
                  }
                ]
              },
              {
                actions: [
                  {
                    icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
                    label: t("actions.delete"),
                    onClick: handleDelete
                  }
                ]
              }
            ]
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-start px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.description") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: salesChannel.description || "-" })
    ] })
  ] });
};
var PAGE_SIZE = 10;
var SalesChannelProductSection = ({
  salesChannel
}) => {
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { searchParams, raw } = useProductTableQuery({ pageSize: PAGE_SIZE });
  const {
    products,
    count,
    isPending: isLoading,
    isError,
    error
  } = useProducts(
    {
      ...searchParams,
      sales_channel_id: [salesChannel.id]
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useProductTableFilters(["sales_channel_id"]);
  const { table } = useDataTable({
    data: products ?? [],
    columns,
    count,
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    getRowId: (row) => row.id,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    meta: {
      salesChannelId: salesChannel.id
    }
  });
  const { mutateAsync } = useSalesChannelRemoveProducts(salesChannel.id);
  const prompt = usePrompt();
  const { t } = useTranslation();
  const handleRemove = async () => {
    const ids = Object.keys(rowSelection);
    const result = await prompt({
      title: t("general.areYouSure"),
      description: t("salesChannels.removeProductsWarning", {
        count: ids.length,
        sales_channel: salesChannel.name
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!result) {
      return;
    }
    await mutateAsync(ids, {
      onSuccess: () => {
        toast.success(t("salesChannels.toast.update"));
        setRowSelection({});
      },
      onError: (error2) => {
        toast.error(error2.message);
      }
    });
  };
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Heading, { level: "h2", children: t("products.domain") }),
      (0, import_jsx_runtime3.jsx)(Link, { to: `/settings/sales-channels/${salesChannel.id}/add-products`, children: (0, import_jsx_runtime3.jsx)(Button, { size: "small", variant: "secondary", children: t("general.add") }) })
    ] }),
    (0, import_jsx_runtime3.jsx)(
      _DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        commands: [
          {
            action: handleRemove,
            label: t("actions.remove"),
            shortcut: "r"
          }
        ],
        count,
        pagination: true,
        search: true,
        filters,
        navigateTo: (row) => `/products/${row.id}`,
        isLoading,
        orderBy: [
          { key: "title", label: t("fields.title") },
          { key: "status", label: t("fields.status") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        queryObject: raw,
        noRecords: {
          message: t("salesChannels.products.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useProductTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const { salesChannelId } = table.options.meta;
          return (0, import_jsx_runtime3.jsx)(
            ProductListCellActions,
            {
              productId: row.original.id,
              salesChannelId
            }
          );
        }
      })
    ],
    [base]
  );
};
var ProductListCellActions = ({
  salesChannelId,
  productId
}) => {
  const { t } = useTranslation();
  const { mutateAsync } = useSalesChannelRemoveProducts(salesChannelId);
  const onRemove = async () => {
    await mutateAsync([productId], {
      onSuccess: () => {
        toast.success(t("salesChannels.toast.update"));
      },
      onError: (e) => {
        toast.error(e.message);
      }
    });
  };
  return (0, import_jsx_runtime3.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/products/${productId}`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: onRemove
            }
          ]
        }
      ]
    }
  );
};
var SalesChannelDetail = () => {
  const initialData = useLoaderData();
  const { id } = useParams();
  const { sales_channel, isPending: isLoading } = useSalesChannel(id, {
    initialData
  });
  const { getWidgets } = useExtension();
  if (isLoading || !sales_channel) {
    return (0, import_jsx_runtime4.jsx)(SingleColumnPageSkeleton, { sections: 2, showJSON: true, showMetadata: true });
  }
  return (0, import_jsx_runtime4.jsxs)(
    SingleColumnPage,
    {
      widgets: {
        before: getWidgets("sales_channel.details.before"),
        after: getWidgets("sales_channel.details.after")
      },
      showJSON: true,
      showMetadata: true,
      data: sales_channel,
      children: [
        (0, import_jsx_runtime4.jsx)(SalesChannelGeneralSection, { salesChannel: sales_channel }),
        (0, import_jsx_runtime4.jsx)(SalesChannelProductSection, { salesChannel: sales_channel })
      ]
    }
  );
};
export {
  SalesChannelDetailBreadcrumb as Breadcrumb,
  SalesChannelDetail as Component,
  salesChannelLoader as loader
};
//# sourceMappingURL=sales-channel-detail-UFL3EW5W-MMKIVS25.js.map
