import {
  useDeleteProductTagAction
} from "./chunk-CDQUSWQY.js";
import {
  useProductTagTableColumns
} from "./chunk-QINRCASY.js";
import "./chunk-YDNWXMGG.js";
import "./chunk-ALLTTKQM.js";
import "./chunk-WW427ECV.js";
import "./chunk-6NQY7BJP.js";
import "./chunk-CKOUU4JV.js";
import {
  useProductTagTableQuery
} from "./chunk-7WUI2YZH.js";
import "./chunk-ALRDTMZY.js";
import "./chunk-XMETHAO2.js";
import "./chunk-ALGDMVL5.js";
import "./chunk-ME4JX6BC.js";
import "./chunk-T5RHBZK7.js";
import "./chunk-5A2M6EP6.js";
import "./chunk-XP3FQHX6.js";
import "./chunk-TZ6OUX2M.js";
import "./chunk-M67SMQ54.js";
import "./chunk-CRCAMMV6.js";
import "./chunk-4WHLYZE3.js";
import "./chunk-PUOXQZOY.js";
import "./chunk-MK3JMYNI.js";
import "./chunk-UB6PBZXE.js";
import "./chunk-O5EZ54CU.js";
import "./chunk-H3377HN2.js";
import "./chunk-3IIYZ64L.js";
import "./chunk-TXNLROK3.js";
import "./chunk-BIRKHRM5.js";
import "./chunk-SFICZRIG.js";
import "./chunk-6OPIMQB2.js";
import "./chunk-D4WLXLGW.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-YTZMYL6K.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-UJDBFPAZ.js";
import "./chunk-B6I4MZEO.js";
import "./chunk-KWMDZ6BC.js";
import "./chunk-UJR4JJZD.js";
import {
  SingleColumnPage
} from "./chunk-AEMIRFYX.js";
import "./chunk-GNDABBEF.js";
import "./chunk-DMSO7TLP.js";
import {
  useProductTagTableFilters
} from "./chunk-5JOL3KTL.js";
import "./chunk-5ADZEGPQ.js";
import "./chunk-JCE75YVE.js";
import "./chunk-E7BUCTJZ.js";
import "./chunk-QBMH534V.js";
import "./chunk-QAAY26NJ.js";
import "./chunk-27PZVID2.js";
import "./chunk-FGPKOL7P.js";
import "./chunk-3MPNBNW6.js";
import "./chunk-S4LFXI6N.js";
import "./chunk-LDXLHKW3.js";
import "./chunk-S4FM5UR5.js";
import "./chunk-D3Q6I47Q.js";
import "./chunk-OJGYXDFE.js";
import "./chunk-4JOZ6DYP.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import "./chunk-7EFSR7FF.js";
import {
  ActionMenu
} from "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-BZVV3R6L.js";
import "./chunk-5VPBSHL5.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YL65RGIG.js";
import {
  productTagsQueryKeys,
  useProductTags
} from "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import "./chunk-IRP64SGR.js";
import "./chunk-HDKB57EC.js";
import "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import "./chunk-GZ7A7UHH.js";
import "./chunk-ECEQ7FRD.js";
import {
  queryClient
} from "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import {
  sdk
} from "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  Link,
  useLoaderData
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  Trash,
  createColumnHelper
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/product-tag-list-DASW6YQO.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var productTagListQuery = (query) => ({
  queryKey: productTagsQueryKeys.list(query),
  queryFn: async () => sdk.admin.productTag.list(query)
});
var productTagListLoader = async ({ request }) => {
  const searchParams = new URL(request.url).searchParams;
  const queryObject = {};
  searchParams.forEach((value, key) => {
    try {
      queryObject[key] = JSON.parse(value);
    } catch (_e) {
      queryObject[key] = value;
    }
  });
  const query = productTagListQuery(
    queryObject
  );
  return queryClient.getQueryData(query.queryKey) ?? await queryClient.fetchQuery(query);
};
var PAGE_SIZE = 20;
var ProductTagListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useProductTagTableQuery({
    pageSize: PAGE_SIZE
  });
  const initialData = useLoaderData();
  const { product_tags, count, isPending, isError, error } = useProductTags(
    searchParams,
    {
      initialData,
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useProductTagTableFilters();
  const { table } = useDataTable({
    data: product_tags,
    count,
    columns,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y px-0 py-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: t("productTags.domain") }),
      (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", asChild: true, children: (0, import_jsx_runtime.jsx)(Link, { to: "create", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime.jsx)(
      _DataTable,
      {
        table,
        filters,
        queryObject: raw,
        isLoading: isPending,
        columns,
        pageSize: PAGE_SIZE,
        count,
        navigateTo: (row) => row.original.id,
        search: true,
        pagination: true,
        orderBy: [
          { key: "value", label: t("fields.value") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ]
      }
    )
  ] });
};
var ProductTagRowActions = ({
  productTag
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeleteProductTagAction({ productTag });
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `${productTag.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(Trash, {}),
              label: t("actions.delete"),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useProductTagTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime.jsx)(ProductTagRowActions, { productTag: row.original })
      })
    ],
    [base]
  );
};
var ProductTagList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      showMetadata: false,
      showJSON: false,
      hasOutlet: true,
      widgets: {
        after: getWidgets("product_tag.list.after"),
        before: getWidgets("product_tag.list.before")
      },
      children: (0, import_jsx_runtime2.jsx)(ProductTagListTable, {})
    }
  );
};
export {
  ProductTagList as Component,
  productTagListLoader as loader
};
//# sourceMappingURL=product-tag-list-DASW6YQO-36N6DBTF.js.map
