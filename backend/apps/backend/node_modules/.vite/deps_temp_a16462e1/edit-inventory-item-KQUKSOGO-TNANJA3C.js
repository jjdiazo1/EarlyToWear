import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-I7G7GHST.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DK7QBDFE.js";
import {
  t
} from "./chunk-CV323USI.js";
import {
  z
} from "./chunk-HC4RL2IT.js";
import {
  Form,
  useForm
} from "./chunk-SMYLJ4RB.js";
import {
  useInventoryItem,
  useUpdateInventoryItem
} from "./chunk-ECEQ7FRD.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useParams
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Heading,
  Input,
  toast
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/edit-inventory-item-KQUKSOGO.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var EditInventoryItemSchema = z.object({
  title: z.string().optional(),
  sku: z.string().min(1)
});
var getDefaultValues = (item) => {
  return {
    title: item.title ?? void 0,
    sku: item.sku ?? void 0
  };
};
var EditInventoryItemForm = ({ item }) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: getDefaultValues(item),
    resolver: t(EditInventoryItemSchema)
  });
  const { mutateAsync, isPending: isLoading } = useUpdateInventoryItem(item.id);
  const handleSubmit = form.handleSubmit(async (values) => {
    mutateAsync(values, {
      onSuccess: () => {
        toast.success(t2("inventory.toast.updateItem"));
        handleSuccess();
      },
      onError: (e) => toast.error(e.message)
    });
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex flex-1 flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex flex-1 flex-col gap-y-8 overflow-auto", children: [
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "title",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.title") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "sku",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.sku") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { type: "submit", size: "small", isLoading, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var InventoryItemEdit = () => {
  const { id } = useParams();
  const { t: t2 } = useTranslation();
  const {
    inventory_item: inventoryItem,
    isPending: isLoading,
    isError,
    error
  } = useInventoryItem(id);
  const ready = !isLoading && inventoryItem;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("inventory.editItemDetails") }) }),
    ready && (0, import_jsx_runtime2.jsx)(EditInventoryItemForm, { item: inventoryItem })
  ] });
};
export {
  InventoryItemEdit as Component
};
//# sourceMappingURL=edit-inventory-item-KQUKSOGO-TNANJA3C.js.map
