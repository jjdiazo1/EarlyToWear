import {
  CountrySelect
} from "./chunk-WEMJNUAP.js";
import {
  PRODUCT_DETAIL_FIELDS
} from "./chunk-RZI3FDMP.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-I7G7GHST.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DK7QBDFE.js";
import {
  FormExtensionZone,
  useExtendableForm
} from "./chunk-64WNAKXE.js";
import "./chunk-GSNN4JWJ.js";
import "./chunk-I3LPG37C.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-LJIP222I.js";
import "./chunk-AZRCKYHA.js";
import "./chunk-6DWXBVRC.js";
import "./chunk-W6UBDMBU.js";
import "./chunk-6AW7DHWP.js";
import "./chunk-OJGYXDFE.js";
import "./chunk-GEQZCNMA.js";
import "./chunk-RUX6WZZN.js";
import "./chunk-CV323USI.js";
import {
  numberType,
  objectType,
  stringType,
  unionType
} from "./chunk-HC4RL2IT.js";
import "./chunk-4JOZ6DYP.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import "./chunk-7EFSR7FF.js";
import "./chunk-47MXVYWL.js";
import "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-BZVV3R6L.js";
import "./chunk-5VPBSHL5.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YL65RGIG.js";
import {
  Form
} from "./chunk-SMYLJ4RB.js";
import "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import "./chunk-IRP64SGR.js";
import "./chunk-HDKB57EC.js";
import "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import "./chunk-GZ7A7UHH.js";
import {
  useProduct,
  useUpdateProduct
} from "./chunk-ECEQ7FRD.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useParams
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Heading,
  Input
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/product-attributes-JBZ5SBZP.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var dimension = unionType([stringType(), numberType()]).transform((value) => {
  if (value === "") {
    return null;
  }
  return Number(value);
}).optional().nullable();
var ProductAttributesSchema = objectType({
  weight: dimension,
  length: dimension,
  width: dimension,
  height: dimension,
  mid_code: stringType().optional(),
  hs_code: stringType().optional(),
  origin_country: stringType().optional()
});
var ProductAttributesForm = ({
  product
}) => {
  const { t } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const { getFormConfigs, getFormFields } = useExtension();
  const configs = getFormConfigs("product", "attributes");
  const fields = getFormFields("product", "attributes");
  const form = useExtendableForm({
    defaultValues: {
      height: product.height ? product.height : null,
      width: product.width ? product.width : null,
      length: product.length ? product.length : null,
      weight: product.weight ? product.weight : null,
      mid_code: product.mid_code || "",
      hs_code: product.hs_code || "",
      origin_country: product.origin_country || ""
    },
    schema: ProductAttributesSchema,
    configs,
    data: product
  });
  const { mutateAsync, isPending } = useUpdateProduct(product.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        weight: data.weight ? data.weight : void 0,
        length: data.length ? data.length : void 0,
        width: data.width ? data.width : void 0,
        height: data.height ? data.height : void 0,
        mid_code: data.mid_code,
        hs_code: data.hs_code,
        origin_country: data.origin_country
      },
      {
        onSuccess: () => {
          handleSuccess();
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { onSubmit: handleSubmit, className: "flex h-full flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex h-full flex-col gap-y-8", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "width",
          render: ({ field: { onChange, value, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.width") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Input,
                {
                  type: "number",
                  min: 0,
                  value: value || "",
                  onChange: (e) => {
                    const value2 = e.target.value;
                    if (value2 === "") {
                      onChange(null);
                    } else {
                      onChange(parseFloat(value2));
                    }
                  },
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "height",
          render: ({ field: { onChange, value, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.height") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Input,
                {
                  type: "number",
                  min: 0,
                  value: value || "",
                  onChange: (e) => {
                    const value2 = e.target.value;
                    if (value2 === "") {
                      onChange(null);
                    } else {
                      onChange(Number(value2));
                    }
                  },
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "length",
          render: ({ field: { onChange, value, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.length") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Input,
                {
                  type: "number",
                  min: 0,
                  value: value || "",
                  onChange: (e) => {
                    const value2 = e.target.value;
                    if (value2 === "") {
                      onChange(null);
                    } else {
                      onChange(Number(value2));
                    }
                  },
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "weight",
          render: ({ field: { onChange, value, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.weight") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Input,
                {
                  type: "number",
                  min: 0,
                  value: value || "",
                  onChange: (e) => {
                    const value2 = e.target.value;
                    if (value2 === "") {
                      onChange(null);
                    } else {
                      onChange(Number(value2));
                    }
                  },
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "mid_code",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.midCode") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "hs_code",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.hsCode") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "origin_country",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t("fields.countryOfOrigin") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(CountrySelect, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(FormExtensionZone, { fields, form })
    ] }) }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t("actions.save") })
    ] }) })
  ] }) });
};
var ProductAttributes = () => {
  const { id } = useParams();
  const { t } = useTranslation();
  const { product, isLoading, isError, error } = useProduct(id, {
    fields: PRODUCT_DETAIL_FIELDS
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t("products.editAttributes") }) }) }),
    !isLoading && product && (0, import_jsx_runtime2.jsx)(ProductAttributesForm, { product })
  ] });
};
export {
  ProductAttributes as Component
};
//# sourceMappingURL=product-attributes-JBZ5SBZP-73PQ4JMU.js.map
