import {
  useCurrenciesTableColumns,
  useCurrenciesTableQuery
} from "./chunk-C6HUBO5T.js";
import "./chunk-3IIYZ64L.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-YTZMYL6K.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-UJDBFPAZ.js";
import "./chunk-B6I4MZEO.js";
import "./chunk-KWMDZ6BC.js";
import "./chunk-UJR4JJZD.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-I7G7GHST.js";
import "./chunk-DMSO7TLP.js";
import "./chunk-S4LFXI6N.js";
import "./chunk-LDXLHKW3.js";
import "./chunk-S4FM5UR5.js";
import "./chunk-D3Q6I47Q.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-DK7QBDFE.js";
import {
  t
} from "./chunk-CV323USI.js";
import {
  arrayType,
  booleanType,
  objectType,
  recordType,
  stringType
} from "./chunk-HC4RL2IT.js";
import "./chunk-7EFSR7FF.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-BZVV3R6L.js";
import "./chunk-5VPBSHL5.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import "./chunk-YL65RGIG.js";
import {
  useForm
} from "./chunk-SMYLJ4RB.js";
import {
  useCurrencies
} from "./chunk-PJRIQSH3.js";
import {
  useStore,
  useUpdateStore
} from "./chunk-Q5XMBCMY.js";
import {
  pricePreferencesQueryKeys,
  usePricePreferences
} from "./chunk-64DFPJMQ.js";
import {
  queryClient
} from "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import "./chunk-I262FXMQ.js";
import {
  Button,
  Checkbox,
  Hint,
  Switch,
  Tooltip,
  createColumnHelper,
  toast
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/store-add-currencies-2OBWTWKT.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AddCurrenciesSchema = objectType({
  currencies: arrayType(stringType()).min(1),
  pricePreferences: recordType(booleanType())
});
var PAGE_SIZE = 50;
var PREFIX = "ac";
var AddCurrenciesForm = ({
  store,
  pricePreferences
}) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const { raw, searchParams } = useCurrenciesTableQuery({
    pageSize: 50,
    prefix: PREFIX
  });
  const {
    currencies,
    count,
    isPending: isLoading,
    isError,
    error
  } = useCurrencies(searchParams, {
    placeholderData: keepPreviousData
  });
  const form = useForm({
    defaultValues: {
      currencies: [],
      pricePreferences: pricePreferences == null ? void 0 : pricePreferences.reduce(
        (acc, curr) => {
          if (curr.value) {
            acc[curr.value] = curr.is_tax_inclusive;
          }
          return acc;
        },
        {}
      )
    },
    resolver: t(AddCurrenciesSchema)
  });
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { setValue, watch } = form;
  const pricePreferenceValues = watch("pricePreferences");
  const updater = (fn) => {
    const updated = typeof fn === "function" ? fn(rowSelection) : fn;
    const ids = Object.keys(updated);
    setValue("currencies", ids, {
      shouldDirty: true,
      shouldTouch: true
    });
    setRowSelection(updated);
  };
  const preSelectedRows = ((_a = store.supported_currencies) == null ? void 0 : _a.map((c) => c.currency_code)) ?? [];
  const setPricePreferences = (0, import_react.useCallback)(
    (values) => {
      setValue("pricePreferences", values);
    },
    [setValue]
  );
  const columns = useColumns(pricePreferenceValues, setPricePreferences);
  const { table } = useDataTable({
    data: currencies ?? [],
    columns,
    count,
    getRowId: (row) => row.code,
    enableRowSelection: (row) => !preSelectedRows.includes(row.original.code),
    enablePagination: true,
    pageSize: PAGE_SIZE,
    prefix: PREFIX,
    rowSelection: {
      state: rowSelection,
      updater
    }
  });
  const { mutateAsync, isPending } = useUpdateStore(store.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    var _a2, _b;
    const currencies2 = Array.from(
      /* @__PURE__ */ new Set([...data.currencies, ...preSelectedRows])
    );
    let defaultCurrency = (_b = (_a2 = store.supported_currencies) == null ? void 0 : _a2.find(
      (c) => c.is_default
    )) == null ? void 0 : _b.currency_code;
    if (!currencies2.includes(defaultCurrency ?? "")) {
      defaultCurrency = currencies2 == null ? void 0 : currencies2[0];
    }
    await mutateAsync(
      {
        supported_currencies: currencies2.map((c) => ({
          currency_code: c,
          is_default: c === defaultCurrency,
          is_tax_inclusive: data.pricePreferences[c]
        }))
      },
      {
        onSuccess: () => {
          toast.success(t2("store.toast.currenciesUpdated"));
          queryClient.invalidateQueries({
            queryKey: pricePreferencesQueryKeys.all
          });
          handleSuccess();
        },
        onError: (error2) => {
          toast.error(error2.message);
        }
      }
    );
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex h-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 items-center justify-between", children: (0, import_jsx_runtime.jsx)("div", { className: "flex items-center", children: form.formState.errors.currencies && (0, import_jsx_runtime.jsx)(Hint, { variant: "error", children: form.formState.errors.currencies.message }) }) }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsx)(
          _DataTable,
          {
            table,
            pageSize: PAGE_SIZE,
            count,
            columns,
            layout: "fill",
            pagination: true,
            search: "autofocus",
            prefix: PREFIX,
            orderBy: [
              { key: "name", label: t2("fields.name") },
              { key: "code", label: t2("fields.code") }
            ],
            isLoading,
            queryObject: raw
          }
        ) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var columnHelper = createColumnHelper();
var useColumns = (pricePreferences, setPricePreferences) => {
  const { t: t2 } = useTranslation();
  const base = useCurrenciesTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          const isPreSelected = !row.getCanSelect();
          const isSelected = row.getIsSelected() || isPreSelected;
          const Component = (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: isSelected,
              disabled: isPreSelected,
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
          if (isPreSelected) {
            return (0, import_jsx_runtime.jsx)(Tooltip, { content: t2("store.currencyAlreadyAdded"), side: "right", children: Component });
          }
          return Component;
        }
      }),
      ...base,
      columnHelper.display({
        id: "select",
        header: () => (0, import_jsx_runtime.jsx)("div", { className: "whitespace-nowrap", children: t2("fields.taxInclusivePricing") }),
        cell: ({ row }) => {
          const isPreSelected = !row.getCanSelect();
          const isTaxInclusive = pricePreferences[row.original.code];
          return (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end", children: (0, import_jsx_runtime.jsx)(
            Switch,
            {
              disabled: isPreSelected,
              checked: isTaxInclusive ?? false,
              onCheckedChange: (val) => {
                setPricePreferences({
                  ...pricePreferences,
                  [row.original.code]: val
                });
              }
            }
          ) });
        }
      })
    ],
    [t2, base, pricePreferences, setPricePreferences]
  );
};
var StoreAddCurrencies = () => {
  var _a;
  const { store, isPending, isError, error } = useStore();
  const {
    price_preferences: pricePreferences,
    isPending: isPricePreferencesPending,
    isError: isPricePreferencesError,
    error: pricePreferencesError
  } = usePricePreferences(
    {
      attribute: "currency_code",
      value: (_a = store == null ? void 0 : store.supported_currencies) == null ? void 0 : _a.map((c) => c.currency_code)
    },
    {
      enabled: !!store
    }
  );
  const ready = !!store && !isPending && !!pricePreferences && !isPricePreferencesPending;
  if (isError) {
    throw error;
  }
  if (isPricePreferencesError) {
    throw pricePreferencesError;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { children: ready && (0, import_jsx_runtime2.jsx)(AddCurrenciesForm, { store, pricePreferences }) });
};
export {
  StoreAddCurrencies as Component
};
//# sourceMappingURL=store-add-currencies-2OBWTWKT-LNTZOBCI.js.map
