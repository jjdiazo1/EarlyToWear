import {
  SingleColumnPage
} from "./chunk-AEMIRFYX.js";
import {
  useDataTableDateColumns
} from "./chunk-PYIIZYAY.js";
import {
  DataTable,
  useDataTableDateFilters
} from "./chunk-GHKTBX2J.js";
import {
  useQueryParams
} from "./chunk-DMSO7TLP.js";
import "./chunk-D3Q6I47Q.js";
import {
  useExtension
} from "./chunk-CIC6RSHB.js";
import "./chunk-OE6TAU3J.js";
import "./chunk-I6VZXJQI.js";
import "./chunk-F75SSP3H.js";
import "./chunk-S2A3CQAJ.js";
import "./chunk-LNNQ3FK3.js";
import {
  useUsers
} from "./chunk-7ON65VYV.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useNavigate
} from "./chunk-I262FXMQ.js";
import {
  Container,
  PencilSquare,
  createDataTableColumnHelper
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import {
  keepPreviousData
} from "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import {
  require_react
} from "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/user-list-35TJ53CP.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
var UserListTable = () => {
  const { q, order, offset } = useQueryParams(["q", "order", "offset"]);
  const { users, count, isPending, isError, error } = useUsers(
    {
      q,
      order,
      offset: offset ? parseInt(offset) : 0,
      limit: PAGE_SIZE
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useFilters();
  const { t } = useTranslation();
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(Container, { className: "divide-y p-0", children: (0, import_jsx_runtime.jsx)(
    DataTable,
    {
      data: users,
      columns,
      filters,
      getRowId: (row) => row.id,
      rowCount: count,
      pageSize: PAGE_SIZE,
      heading: t("users.domain"),
      rowHref: (row) => `${row.id}`,
      isLoading: isPending,
      action: {
        label: t("users.invite"),
        to: "invite"
      },
      emptyState: {
        empty: {
          heading: t("users.list.empty.heading"),
          description: t("users.list.empty.description")
        },
        filtered: {
          heading: t("users.list.filtered.heading"),
          description: t("users.list.filtered.description")
        }
      }
    }
  ) });
};
var columnHelper = createDataTableColumnHelper();
var useColumns = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const dateColumns = useDataTableDateColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.accessor("email", {
        header: t("fields.email"),
        cell: ({ row }) => {
          return row.original.email;
        },
        enableSorting: true,
        sortAscLabel: t("filters.sorting.alphabeticallyAsc"),
        sortDescLabel: t("filters.sorting.alphabeticallyDesc")
      }),
      columnHelper.accessor("first_name", {
        header: t("fields.firstName"),
        cell: ({ row }) => {
          return row.original.first_name || "-";
        },
        enableSorting: true,
        sortAscLabel: t("filters.sorting.alphabeticallyAsc"),
        sortDescLabel: t("filters.sorting.alphabeticallyDesc")
      }),
      columnHelper.accessor("last_name", {
        header: t("fields.lastName"),
        cell: ({ row }) => {
          return row.original.last_name || "-";
        },
        enableSorting: true,
        sortAscLabel: t("filters.sorting.alphabeticallyAsc"),
        sortDescLabel: t("filters.sorting.alphabeticallyDesc")
      }),
      ...dateColumns,
      columnHelper.action({
        actions: [
          {
            label: t("actions.edit"),
            icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
            onClick: (ctx) => {
              navigate(`${ctx.row.original.id}/edit`);
            }
          }
        ]
      })
    ],
    [t, navigate, dateColumns]
  );
};
var useFilters = () => {
  const dateFilters = useDataTableDateFilters();
  return (0, import_react.useMemo)(() => {
    return dateFilters;
  }, [dateFilters]);
};
var UserList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("user.list.after"),
        before: getWidgets("user.list.before")
      },
      children: (0, import_jsx_runtime2.jsx)(UserListTable, {})
    }
  );
};
export {
  UserList as Component
};
//# sourceMappingURL=user-list-35TJ53CP-SRYWSSI2.js.map
