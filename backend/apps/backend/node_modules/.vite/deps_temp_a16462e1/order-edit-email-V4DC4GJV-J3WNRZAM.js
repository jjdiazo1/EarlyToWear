import {
  DEFAULT_FIELDS
} from "./chunk-POF426MB.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-I7G7GHST.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DK7QBDFE.js";
import {
  t
} from "./chunk-CV323USI.js";
import {
  objectType,
  stringType
} from "./chunk-HC4RL2IT.js";
import {
  Form,
  useForm
} from "./chunk-SMYLJ4RB.js";
import "./chunk-YAA36TOQ.js";
import "./chunk-UPLU576J.js";
import "./chunk-JHNI6YOH.js";
import "./chunk-ABRUFRXN.js";
import "./chunk-KB3CLUTK.js";
import "./chunk-TYLSLTCN.js";
import "./chunk-7MCWFUK2.js";
import "./chunk-YKSYPOUF.js";
import "./chunk-UYXBPZ72.js";
import "./chunk-PJRIQSH3.js";
import "./chunk-6XU63MJU.js";
import "./chunk-MGRMG3VL.js";
import "./chunk-7ON65VYV.js";
import "./chunk-QMY4FYTB.js";
import "./chunk-GNKYMVVR.js";
import "./chunk-T63NSFMV.js";
import "./chunk-YEQN2LHI.js";
import "./chunk-QG22Q6ZK.js";
import "./chunk-IRP64SGR.js";
import {
  useOrder,
  useUpdateOrder
} from "./chunk-HDKB57EC.js";
import "./chunk-4MCPJ64J.js";
import "./chunk-SQGHJBKY.js";
import "./chunk-Q5XMBCMY.js";
import "./chunk-LKWRDYRO.js";
import "./chunk-64DFPJMQ.js";
import "./chunk-GZ7A7UHH.js";
import "./chunk-ECEQ7FRD.js";
import "./chunk-SOMBWYPY.js";
import "./chunk-SQ6FHBV3.js";
import "./chunk-IP5FJ4Q2.js";
import {
  useTranslation
} from "./chunk-JO3NCOKW.js";
import "./chunk-H6X3OY4K.js";
import {
  useParams
} from "./chunk-I262FXMQ.js";
import {
  Button,
  Heading,
  Input,
  toast
} from "./chunk-46LAUZLH.js";
import "./chunk-Q3E3QMCG.js";
import "./chunk-FO7RYXPS.js";
import "./chunk-DGMBLKJK.js";
import "./chunk-53ZYQZY4.js";
import {
  require_jsx_runtime
} from "./chunk-QXMNAICV.js";
import "./chunk-QBXGYTN6.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// ../../node_modules/@medusajs/dashboard/dist/order-edit-email-V4DC4GJV.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var EditOrderEmailSchema = objectType({
  email: stringType().email()
});
function EditOrderEmailForm({ order }) {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      email: order.email || ""
    },
    resolver: t(EditOrderEmailSchema)
  });
  const { mutateAsync, isPending } = useUpdateOrder(order.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    try {
      await mutateAsync({
        email: data.email
      });
      toast.success(
        t2("orders.edit.email.requestSuccess", { email: data.email })
      );
      handleSuccess();
    } catch (error) {
      toast.error(error.message);
    }
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex size-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex-1 overflow-auto", children: (0, import_jsx_runtime.jsx)(
          Form.Field,
          {
            control: form.control,
            name: "email",
            render: ({ field }) => {
              return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.email") }),
                (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { type: "email", ...field }) }),
                (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
              ] });
            }
          }
        ) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              isLoading: isPending,
              type: "submit",
              variant: "primary",
              size: "small",
              children: t2("actions.save")
            }
          )
        ] }) })
      ]
    }
  ) });
}
var OrderEditEmail = () => {
  const { t: t2 } = useTranslation();
  const params = useParams();
  const { order, isPending, isError, error } = useOrder(params.id, {
    fields: DEFAULT_FIELDS
  });
  if (!isPending && isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("orders.edit.email.title") }) }),
    order && (0, import_jsx_runtime2.jsx)(EditOrderEmailForm, { order })
  ] });
};
export {
  OrderEditEmail as Component
};
//# sourceMappingURL=order-edit-email-V4DC4GJV-J3WNRZAM.js.map
